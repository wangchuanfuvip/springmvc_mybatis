package com.taotao.web.service;

import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.codec.binary.Base64;
import org.apache.commons.lang3.StringEscapeUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.taotao.common.util.CookieUtils;
import com.taotao.web.pojo.Cart;
import com.taotao.web.pojo.Item;

@Service
public class CartCookieService {

    private static final String TT_CART = "TAOTAO_CART";

    private static final ObjectMapper MAPPER = new ObjectMapper();

    private static final Integer COOKIE_TIME = 60 * 60 * 24 * 30;

    @Autowired
    private ItemService itemService;

    public void addItemToCart(Long itemId, HttpServletRequest request, HttpServletResponse response)
            throws Exception {
        // 读取cookie中购物车的数据
        String cookieData = CookieUtils.getCookieValue(request, TT_CART);
        List<Cart> carts = null;
        if (StringUtils.isEmpty(cookieData)) {
            // 将商品数据保存到cookie中
            carts = new ArrayList<Cart>(1);
            carts.add(itemToCart(itemId));
        } else {
            carts = MAPPER.readValue(cookieData,
                    MAPPER.getTypeFactory().constructCollectionType(List.class, Cart.class));
            // 判断，该商品是否存在购物车中
            boolean bool = false;
            Cart cart = null;
            for (Cart c : carts) {
                if (c.getItemId().intValue() == itemId.intValue()) {
                    bool = true;
                    cart = c;
                    break;
                }
            }

            if (bool) {
                // 存在
                cart.setNum(cart.getNum() + 1);
            } else {
                carts.add(itemToCart(itemId));
            }
        }
        CookieUtils.setCookie(request, response, TT_CART, MAPPER.writeValueAsString(carts), COOKIE_TIME);
    }

    private Cart itemToCart(Long itemId) {
        Item item = this.itemService.queryItemById(itemId);
        Cart cart = new Cart();
        cart.setItemId(itemId);
        String[] images = item.getImages();
        if (images == null) {
            cart.setItemImage("");
        } else {
            cart.setItemImage(images[0]);
        }
        cart.setItemPrice(item.getPrice());
        cart.setItemTitle(item.getTitle());
        cart.setNum(1);
        cart.setCreated(new Date());
        return cart;
    }
    
    public static void main(String[] args) throws Exception {
        System.out.println(StringEscapeUtils.escapeJson("我<a>是"));
    }

}
